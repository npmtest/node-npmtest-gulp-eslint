{"/home/travis/build/npmtest/node-npmtest-gulp-eslint/test.js":"/* istanbul instrument in package npmtest_gulp_eslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-eslint/lib.npmtest_gulp_eslint.js":"/* istanbul instrument in package npmtest_gulp_eslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_eslint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_eslint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-eslint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-eslint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_eslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_eslint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_eslint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_eslint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_eslint.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_eslint.__dirname +\n                    '/lib.npmtest_gulp_eslint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-eslint/gulp-eslint/index.js":"'use strict';\n\nconst BufferStreams = require('bufferstreams');\nconst PluginError = require('gulp-util').PluginError;\nconst CLIEngine = require('eslint').CLIEngine;\nconst util = require('./util');\nconst path = require('path');\n\n/**\n * Append ESLint result to each file\n *\n * @param {(Object|String)} [options] - Configure rules, env, global, and other options for running ESLint\n * @returns {stream} gulp file stream\n */\nfunction gulpEslint(options) {\n\toptions = util.migrateOptions(options) || {};\n\tconst linter = new CLIEngine(options);\n\n\tfunction verify(str, filePath) {\n\t\tconst result = linter.executeOnText(str, filePath).results[0];\n\t\t// Note: Fixes are applied as part of \"executeOnText\".\n\t\t// Any applied fix messages have been removed from the result.\n\n\t\tif (options.quiet) {\n\t\t\t// ignore warnings\n\t\t\treturn util.filterResult(result, options.quiet);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\treturn util.transform((file, enc, cb) => {\n\t\tconst filePath = path.relative(process.cwd(), file.path);\n\n\t\tif (file.isNull()) {\n\t\t\tcb(null, file);\n\t\t\treturn;\n\t\t}\n\n\t\tif (linter.isPathIgnored(filePath)) {\n\t\t\t// Note:\n\t\t\t// Vinyl files can have an independently defined cwd, but ESLint works relative to `process.cwd()`.\n\t\t\t// (https://github.com/gulpjs/gulp/blob/master/docs/recipes/specifying-a-cwd.md)\n\t\t\t// Also, ESLint doesn't adjust file paths relative to an ancestory .eslintignore path.\n\t\t\t// E.g., If ../.eslintignore has \"foo/*.js\", ESLint will ignore ./foo/*.js, instead of ../foo/*.js.\n\t\t\t// Eslint rolls this into `CLIEngine.executeOnText`. So, gulp-eslint must account for this limitation.\n\n\t\t\tif (linter.options.ignore && options.warnFileIgnored) {\n\t\t\t\t// Warn that gulp.src is needlessly reading files that ESLint ignores\n\t\t\t\tfile.eslint = util.createIgnoreResult(file);\n\t\t\t}\n\t\t\tcb(null, file);\n\t\t\treturn;\n\t\t}\n\n\t\tif (file.isStream()) {\n\t\t\tfile.contents = file.contents.pipe(new BufferStreams((err, buf, done) => {\n\t\t\t\tfile.eslint = verify(String(buf), filePath);\n\t\t\t\t// Update the fixed output; otherwise, fixable messages are simply ignored.\n\t\t\t\tif (file.eslint.hasOwnProperty('output')) {\n\t\t\t\t\tbuf = new Buffer(file.eslint.output);\n\t\t\t\t\tfile.eslint.fixed = true;\n\t\t\t\t}\n\t\t\t\tdone(null, buf);\n\t\t\t\tcb(null, file);\n\t\t\t}));\n\t\t\treturn;\n\t\t}\n\n\t\tfile.eslint = verify(file.contents.toString(), filePath);\n\t\t// Update the fixed output; otherwise, fixable messages are simply ignored.\n\t\tif (file.eslint.hasOwnProperty('output')) {\n\t\t\tfile.contents = new Buffer(file.eslint.output);\n\t\t\tfile.eslint.fixed = true;\n\t\t}\n\t\tcb(null, file);\n\t});\n}\n\n/**\n * Handle each ESLint result as it passes through the stream.\n *\n * @param {Function} action - A function to handle each ESLint result\n * @returns {stream} gulp file stream\n */\ngulpEslint.result = action => {\n\tif (typeof action !== 'function') {\n\t\tthrow new Error('Expected callable argument');\n\t}\n\n\treturn util.transform((file, enc, done) => {\n\t\tif (file.eslint) {\n\t\t\tutil.tryResultAction(action, file.eslint, util.handleCallback(done, file));\n\t\t} else {\n\t\t\tdone(null, file);\n\t\t}\n\t});\n};\n\n/**\n * Handle all ESLint results at the end of the stream.\n *\n * @param {Function} action - A function to handle all ESLint results\n * @returns {stream} gulp file stream\n */\ngulpEslint.results = function(action) {\n\tif (typeof action !== 'function') {\n\t\tthrow new Error('Expected callable argument');\n\t}\n\n\tconst results = [];\n\tresults.errorCount = 0;\n\tresults.warningCount = 0;\n\n\treturn util.transform((file, enc, done) => {\n\t\tif (file.eslint) {\n\t\t\tresults.push(file.eslint);\n\t\t\t// collect total error/warning count\n\t\t\tresults.errorCount += file.eslint.errorCount;\n\t\t\tresults.warningCount += file.eslint.warningCount;\n\t\t}\n\t\tdone(null, file);\n\n\t}, done => {\n\t\tutil.tryResultAction(action, results, util.handleCallback(done));\n\t});\n};\n\n/**\n * Fail when an ESLint error is found in ESLint results.\n *\n * @returns {stream} gulp file stream\n */\ngulpEslint.failOnError = () => {\n\treturn gulpEslint.result(result => {\n\t\tconst error = util.firstResultMessage(result, util.isErrorMessage);\n\t\tif (!error) {\n\t\t\treturn;\n\t\t}\n\n\t\tthrow new PluginError('gulp-eslint', {\n\t\t\tname: 'ESLintError',\n\t\t\tfileName: result.filePath,\n\t\t\tmessage: error.message,\n\t\t\tlineNumber: error.line\n\t\t});\n\t});\n};\n\n/**\n * Fail when the stream ends if any ESLint error(s) occurred\n *\n * @returns {stream} gulp file stream\n */\ngulpEslint.failAfterError = () => {\n\treturn gulpEslint.results(results => {\n\t\tconst count = results.errorCount;\n\t\tif (!count) {\n\t\t\treturn;\n\t\t}\n\n\t\tthrow new PluginError('gulp-eslint', {\n\t\t\tname: 'ESLintError',\n\t\t\tmessage: 'Failed with ' + count + (count === 1 ? ' error' : ' errors')\n\t\t});\n\t});\n};\n\n/**\n * Format the results of each file individually.\n *\n * @param {(String|Function)} [formatter=stylish] - The name or function for a ESLint result formatter\n * @param {(Function|Stream)} [writable=gulp-util.log] - A funtion or stream to write the formatted ESLint results.\n * @returns {stream} gulp file stream\n */\ngulpEslint.formatEach = (formatter, writable) => {\n\tformatter = util.resolveFormatter(formatter);\n\twritable = util.resolveWritable(writable);\n\n\treturn gulpEslint.result(result => util.writeResults([result], formatter, writable));\n};\n\n/**\n * Wait until all files have been linted and format all results at once.\n *\n * @param {(String|Function)} [formatter=stylish] - The name or function for a ESLint result formatter\n * @param {(Function|stream)} [writable=gulp-util.log] - A funtion or stream to write the formatted ESLint results.\n * @returns {stream} gulp file stream\n */\ngulpEslint.format = (formatter, writable) => {\n\tformatter = util.resolveFormatter(formatter);\n\twritable = util.resolveWritable(writable);\n\n\treturn gulpEslint.results(results => {\n\t\t// Only format results if files has been lint'd\n\t\tif (results.length) {\n\t\t\tutil.writeResults(results, formatter, writable);\n\t\t}\n\t});\n};\n\nmodule.exports = gulpEslint;\n","/home/travis/build/npmtest/node-npmtest-gulp-eslint/gulp-eslint/util.js":"'use strict';\n\nconst Transform = require('stream').Transform;\nconst gutil = require('gulp-util');\nconst CLIEngine = require('eslint').CLIEngine;\n\n/**\n * Convenience method for creating a transform stream in object mode\n *\n * @param {Function} transform - An async function that is called for each stream chunk\n * @param {Function} [flush] - An async function that is called before closing the stream\n * @returns {stream} A transform stream\n */\nexports.transform = function(transform, flush) {\n\tif (typeof flush === 'function') {\n\t\treturn new Transform({\n\t\t\tobjectMode: true,\n\t\t\ttransform,\n\t\t\tflush\n\t\t});\n\t}\n\n\treturn new Transform({\n\t\tobjectMode: true,\n\t\ttransform\n\t});\n};\n\n/**\n * Mimic the CLIEngine's createIgnoreResult function,\n * only without the ESLint CLI reference.\n *\n * @param {Object} file - file with a \"path\" property\n * @returns {Object} An ESLint report with an ignore warning\n */\nexports.createIgnoreResult = file => {\n\treturn {\n\t\tfilePath: file.path,\n\t\tmessages: [{\n\t\t\tfatal: false,\n\t\t\tseverity: 1,\n\t\t\tmessage: file.path.indexOf('node_modules/') < 0 ?\n\t\t\t\t'File ignored because of .eslintignore file' :\n\t\t\t\t'File ignored because it has a node_modules/** path'\n\t\t}],\n\t\terrorCount: 0,\n\t\twarningCount: 1\n\t};\n};\n\n/**\n * Create config helper to merge various config sources\n *\n * @param {Object} options - options to migrate\n * @returns {Object} migrated options\n */\nexports.migrateOptions = function migrateOptions(options) {\n\tif (typeof options === 'string') {\n\t\t// basic config path overload: gulpEslint('path/to/config.json')\n\t\toptions = {\n\t\t\tconfigFile: options\n\t\t};\n\t}\n\n\treturn options;\n};\n\n/**\n * Ensure that callback errors are wrapped in a gulp PluginError\n *\n * @param {Function} callback - callback to wrap\n * @param {Object} [value=] - A value to pass to the callback\n * @returns {Function} A callback to call(back) the callback\n */\nexports.handleCallback = (callback, value) => {\n\treturn err => {\n\t\tif (err != null && !(err instanceof gutil.PluginError)) {\n\t\t\terr = new gutil.PluginError(err.plugin || 'gulp-eslint', err, {\n\t\t\t\tshowStack: (err.showStack !== false)\n\t\t\t});\n\t\t}\n\n\t\tcallback(err, value);\n\t};\n};\n\n/**\n * Call sync or async action and handle any thrown or async error\n *\n * @param {Function} action - Result action to call\n * @param {(Object|Array)} result - An ESLint result or result list\n * @param {Function} done - An callback for when the action is complete\n */\nexports.tryResultAction = function(action, result, done) {\n\ttry {\n\t\tif (action.length > 1) {\n\t\t\t// async action\n\t\t\taction.call(this, result, done);\n\t\t} else {\n\t\t\t// sync action\n\t\t\taction.call(this, result);\n\t\t\tdone();\n\t\t}\n\t} catch (error) {\n\t\tdone(error == null ? new Error('Unknown Error') : error);\n\t}\n};\n\n/**\n * Get first message in an ESLint result to meet a condition\n *\n * @param {Object} result - An ESLint result\n * @param {Function} condition - A condition function that is passed a message and returns a boolean\n * @returns {Object} The first message to pass the condition or null\n */\nexports.firstResultMessage = (result, condition) => {\n\tif (!result.messages) {\n\t\treturn null;\n\t}\n\n\treturn result.messages.find(condition);\n};\n\n/**\n * Determine if a message is an error\n *\n * @param {Object} message - an ESLint message\n * @returns {Boolean} whether the message is an error message\n */\nfunction isErrorMessage(message) {\n\tconst level = message.fatal ? 2 : message.severity;\n\n\tif (Array.isArray(level)) {\n\t\treturn level[0] > 1;\n\t}\n\n\treturn level > 1;\n}\nexports.isErrorMessage = isErrorMessage;\n\n/**\n * Increment count if message is an error\n *\n * @param {Number} count - count of errors\n * @param {Object} message - an ESLint message\n * @returns {Number} The number of errors, message included\n */\nfunction countErrorMessage(count, message) {\n\treturn count + isErrorMessage(message);\n}\n\n/**\n * Increment count if message is a warning\n *\n * @param {Number} count - count of warnings\n * @param {Object} message - an ESLint message\n * @returns {Number} The number of warnings, message included\n */\nfunction countWarningMessage(count, message) {\n\treturn count + (message.severity === 1);\n}\n\n/**\n * Filter result messages, update error and warning counts\n *\n * @param {Object} result - an ESLint result\n * @param {Function} [filter=isErrorMessage] - A function that evaluates what messages to keep\n * @returns {Object} A filtered ESLint result\n */\nexports.filterResult = (result, filter) => {\n\tif (typeof filter !== 'function') {\n\t\tfilter = isErrorMessage;\n\t}\n\tconst messages = result.messages.filter(filter, result);\n\treturn {\n\t\tfilePath: result.filePath,\n\t\tmessages: messages,\n\t\terrorCount: messages.reduce(countErrorMessage, 0),\n\t\twarningCount: messages.reduce(countWarningMessage, 0)\n\t};\n};\n\n/**\n * Resolve formatter from unknown type (accepts string or function)\n *\n * @throws TypeError thrown if unable to resolve the formatter type\n * @param {(String|Function)} [formatter=stylish] - A name to resolve as a formatter. If a function is provided, the same function is returned.\n * @returns {Function} An ESLint formatter\n */\nexports.resolveFormatter = (formatter) => {\n\t// use ESLint to look up formatter references\n\tif (typeof formatter !== 'function') {\n\t\t// load formatter (module, relative to cwd, ESLint formatter)\n\t\tformatter =\tCLIEngine.getFormatter(formatter) || formatter;\n\t}\n\n\treturn formatter;\n};\n\n/**\n * Resolve writable\n *\n * @param {(Function|stream)} [writable=gulp-util.log] - A stream or function to resolve as a format writer\n * @returns {Function} A function that writes formatted messages\n */\nexports.resolveWritable = (writable) => {\n\tif (!writable) {\n\t\twritable = gutil.log;\n\t} else if (typeof writable.write === 'function') {\n\t\twritable = writable.write.bind(writable);\n\t}\n\treturn writable;\n};\n\n/**\n * Write formatter results to writable/output\n *\n * @param {Object[]} results - A list of ESLint results\n * @param {Function} formatter - A function used to format ESLint results\n * @param {Function} writable - A function used to write formatted ESLint results\n */\nexports.writeResults = (results, formatter, writable) => {\n\tif (!results) {\n\t\tresults = [];\n\t}\n\n\tconst firstResult = results.find(result => result.config);\n\n\tconst message = formatter(results, firstResult ? firstResult.config : {});\n\tif (writable && message != null && message !== '') {\n\t\twritable(message);\n\t}\n};\n"}